{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","redux/selectors.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","ChangeActionAC","CHANGE_CHANGE_ACTION","selectAllState","state","CurrencyEContainer","useSelector","currencies","currencyName","buyRate","sellRate","dispatch","useDispatch","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","ChangeCurrentCurrencyAC","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdbf124f.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE\r\n    amountOfBYN: string\r\n    amountOfCurrency: string\r\n};\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => ({\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,  amountOfBYN, amountOfCurrency\r\n});\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION\r\n    isBuying: boolean\r\n};\r\n\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => ({\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION, isBuying\r\n});\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY\r\n    currentCurrency: string\r\n};\r\n\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => ({\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY, currentCurrency\r\n});\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import {IGlobalState} from \"./state\";\n\nexport const selectAllState = (state: IGlobalState) => state.currency","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyType} from '../../redux/currencyReducer';\r\nimport {Dispatch} from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes,\r\n} from '../../redux/actions';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport {selectAllState} from \"../../redux/selectors\";\r\n\r\nexport const CurrencyEContainer: React.FC = () => {\r\n\r\n    const {\r\n            currencies,\r\n            currentCurrency,\r\n            isBuying,\r\n            amountOfBYN,\r\n            amountOfCurrency,\r\n        } = useSelector(selectAllState);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>()\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value))\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        dispatch(e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {CurrencyEContainer} from \"./containers/CurrencyExchangeContainer/CurrencyEContainer\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <CurrencyEContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.45,\r\n            sellRate: 2.47,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 2.42,\r\n            sellRate: 2.47,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0310,\r\n            sellRate: 0.0401,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {...state,\r\n                currentCurrency: action.currentCurrency,\r\n                amountOfBYN: '',\r\n                amountOfCurrency: '',\r\n                        }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n            return {...state,\r\n                isBuying: action.isBuying,\r\n                // when change the field\r\n                amountOfBYN: '',\r\n                amountOfCurrency: '',\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {...state,\r\n                amountOfCurrency: action.amountOfCurrency,\r\n                amountOfBYN: action.amountOfBYN }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}